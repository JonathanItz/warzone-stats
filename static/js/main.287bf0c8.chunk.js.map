{"version":3,"sources":["Results.js","App.js","serviceWorker.js","index.js"],"names":["roundNumber","num","Math","round","Number","EPSILON","Results","stats","username","platform","className","wins","topFive","topTen","kdRatio","kills","deaths","score","revives","downs","scorePerMinute","gamesPlayed","timePlayed","App","props","state","error","errorMessage","hasSearched","xbl","battle","psn","searchStats","bind","e","preventDefault","target","gamertag","value","this","setState","searchableUsername","replace","req","unirest","headers","end","res","body","br","style","marginTop","onSubmit","name","placeholder","updateComponent","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.287bf0c8.chunk.js","sourcesContent":["import React from 'react'\n\nconst roundNumber = ( num ) => {\n    return Math.round( ( num + Number.EPSILON ) * 100 ) / 100\n}\n\nexport default function Results( { stats, username, platform } ) {\n    return (\n        <div className=\"stats-container\">\n            <div className=\"row user\">\n                <div className=\"username columns eight\">\n                    <h4>Stats for: { username }</h4>\n                </div>\n                <div className=\"platform columns four\">\n                    <h5>{ platform }</h5>\n                </div>\n            </div>\n\n            <div className=\"row stats-row\">\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Wins</div>\n                    <div className=\"stat columns six\">{ stats.wins }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Top Five</div>\n                    <div className=\"stat columns six\">{ stats.topFive }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Top Ten</div>\n                    <div className=\"stat columns six\">{ stats.topTen }</div>\n                </div>\n            </div>\n\n            <div className=\"row stats-row\">\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">KD</div>\n                    <div className=\"stat columns six\">{ roundNumber( stats.kdRatio ) }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Kills</div>\n                    <div className=\"stat columns six\">{ stats.kills }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Deaths</div>\n                    <div className=\"stat columns six\">{ stats.deaths }</div>\n                </div>\n            </div>\n\n            <div className=\"row stats-row\">\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Score</div>\n                    <div className=\"stat columns six\">{ stats.score }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Revives</div>\n                    <div className=\"stat columns six\">{ stats.revives }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Downs</div>\n                    <div className=\"stat columns six\">{ stats.downs }</div>\n                </div>\n            </div>\n\n            <div className=\"row stats-row\">\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Score Per Minute</div>\n                    <div className=\"stat columns six\">{ roundNumber( stats.scorePerMinute ) }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Total Games</div>\n                    <div className=\"stat columns six\">{ stats.gamesPlayed }</div>\n                </div>\n                <div className=\"stat-container columns four\">\n                    <div className=\"heading columns six\">Time Played</div>\n                    <div className=\"stat columns six\">{ stats.timePlayed }</div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react'\nimport Results from './Results'\nimport unirest from 'unirest'\n\nclass App extends React.Component {\n    constructor( props ) {\n        super( props )\n\n        this.state = {\n            error: false,\n            errorMessage: '',\n            hasSearched: false,\n            username: '',\n            platform: {\n                xbl:    'XBOX',\n                battle: 'PC',\n                psn:    'Playstation'\n            },\n            stats: {}\n        }\n\n        this.searchStats = this.searchStats.bind( this )\n    }\n\n    searchStats( e ) {\n        e.preventDefault()\n        const username = e.target.gamertag.value,\n            platform = e.target.platform.value\n\n        if( username === '' ) {\n            return this.setState( { error: true, hasSearched: false } )\n        }\n\n        const searchableUsername = username.replace( '#', '%2523' ) // Madman#1207\n\n        var req = unirest(\"GET\", `https://call-of-duty-modern-warfare.p.rapidapi.com/warzone/${ searchableUsername }/${ platform }`);\n\n        req.headers({\n        \t\"x-rapidapi-host\": \"call-of-duty-modern-warfare.p.rapidapi.com\",\n        \t\"x-rapidapi-key\": \"\",\n        \t\"useQueryString\": true\n        });\n\n\n        req.end( res => {\n        \tif ( res.body.error ) return this.setState( { errorMessage: 'An error occurred. Please double check your username is correct', hasSearched: false } )\n\n            this.setState(\n                {\n                    stats: res.body.br,\n                    hasSearched: true,\n                    error: false ,\n                    username,\n                    platform: this.state.platform[ platform ]\n                }\n            )\n        });\n    }\n\n    updateComponent() {\n        const hasSearched = this.state.hasSearched\n\n        if( hasSearched ) {\n            return <Results stats={ this.state.stats } username={ this.state.username } platform={ this.state.platform } />\n        }\n        return <div style={{marginTop: '2rem'}}><h1>Warzone Stats</h1><p>Search your username and platform above</p><p className=\"error-message\">{ this.state.errorMessage }</p></div>\n    }\n\n    render() {\n        return (\n            <>\n                <header className=\"header\">\n                    <div className=\"header-container container\">\n                        <form onSubmit={ this.searchStats }>\n                            <input name=\"gamertag\" className={ this.state.error ? 'error' : null } placeholder=\"Gamertag\" />\n                            <select name=\"platform\">\n                                <option value=\"xbl\">Xbox</option>\n                                <option value=\"battle\">PC (Master Race)</option>\n                                <option value=\"psn\">PSN (smh)</option>\n                            </select>\n                            <button>Submit</button>\n                        </form>\n                    </div>\n                </header>\n                <main>\n                    <div className=\"body-container container\">\n                        { this.updateComponent() }\n                    </div>\n                </main>\n            </>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/app.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}